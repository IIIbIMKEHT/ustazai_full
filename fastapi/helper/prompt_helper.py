from constants import task_types
from constants.subject import get_subject_by_id
from langchain_core.prompts import PromptTemplate, PipelinePromptTemplate

from constants.task_types import TaskTypes

full_template = """{language_detect}
{content}
{html_parse}"""
full_prompt = PromptTemplate.from_template(full_template)
# Первый шаблон: Определение языка для генерации материала
language_determination_prompt = PromptTemplate.from_template("""
Если выбранный предмет является языком (например, "Английский", "Французский", "Немецкий" и т.д.), генерируйте материал на языке предмета. В противном случае, используйте выбранный язык для генерации материала.
Определенный язык: {language}. 
""")
# Второй шаблон: Определение языка для генерации материала
html_prompt = PromptTemplate.from_template("""
    Если в генерированном материале присутствуют математические формулы, убедитесь, что они представлены в формате MathML. Пример формулы: <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>1</mn> <mo>+</mo> <mn>1</mn></math>.
    Представьте викторину в формате HTML без дополнительных пояснений, используя теги `<h1>`, `<h2>`, `<p>`, `<ul>`, `<li>`, `<strong>`. Не включайте теги `<html>`, `<head>`, `<meta>`, `<doctype>` и НЕ включайте символы ```html или ``` в начале и конце. Контент должен быть оформлен на указанном языке ({language}).

    Важно: убедитесь, что ВСЕ математические формулы правильно конвертированы в MathML и вставлены непосредственно в HTML-код. Также убедитесь, что шрифты, используемые в документе, поддерживают кириллицу.
    """
                                           )

# Определение шаблонов для каждого типа задачи
test_prompt = PromptTemplate.from_template("""
Вы — опытный помощник учителя с более чем 15-летним опытом разработки тестов по различным предметам. 
Ваша специализация — создание тестов, которые проверяют знания учащихся и способствуют их образовательному развитию. 
Вам необходимо разработать тест на следующую тему:
- Предмет: {subject}. 
- Класс: {class_level}. 
- Тема: {topic}. 
- Количество вопросов: {qty}. 
- Уровень сложности: {level_test}.
- Формат вопросов: открытые.

Требования:
1. Каждый вопрос должен содержать 4 варианта ответов.
2. Один из вариантов должен быть правильным, и правильный ответ должен быть явно отмечен для учителя.
3. Вопросы должны быть разнообразными, чтобы проверять разные аспекты знаний по теме.
4. Убедитесь, что тест соответствует уровню сложности для класса {class_level}.

Структура теста:
1. **Вопрос**: Текст вопроса.
2. **Варианты ответов**: Приведите 4 варианта ответа. 
3. **Правильный ответ**: Чётко отметьте правильный ответ (например, с пометкой "Правильный ответ: ...").
""")
lesson_plan_prompt = PromptTemplate.from_template("""
Вы — опытный помощник учителя. Создайте подробный и структурированный план урока на {language} языке.
План урока должен быть легко воспринимаем учащимися и включать следующие части:

1. **Введение** (не менее 200 слов): Опишите, как начать урок, представьте материал увлекательно, чтобы сразу заинтересовать учеников темой урока. Используйте вопросы или небольшие активности для вовлечения учащихся. Приведите примеры, как представить тему, чтобы ученики могли сразу погрузиться в изучение.

2. **Основная часть** (не менее 500 слов): Подробно раскройте основные идеи урока. Опишите пошаговые методы объяснения ключевых понятий, приведите несколько примеров и включите различные типы заданий (индивидуальные, групповые). Добавьте пояснения о том, как преподавать материал эффективно. Опишите промежуточные вопросы, которые помогут учащимся лучше усвоить материал. Включите подробное описание каждой планеты или важного аспекта Солнечной системы.

3. **Заключение** (не менее 200 слов): Подведите итог урока, обобщите основные моменты, дайте конкретные задания для закрепления материала (например, практические задания, домашние работы). Включите рекомендации по дополнительным ресурсам для дальнейшего изучения темы.

4. **Вопросы для обсуждения**: Включите минимум 3-5 вопросов, которые можно обсудить в классе для углубления понимания темы и стимулирования критического мышления.

5. **Дополнительно**: Предложите альтернативные подходы к преподаванию сложных моментов, а также интеграцию мультимедиа или интерактивных элементов в урок. Добавьте рекомендации по управлению временем в течение урока.

Данные для плана:
- Предмет: {subject}
- Тема урока: {topic}
- Класс: {class_level}
- Продолжительность: 50 минут
""")

quiz_prompt = PromptTemplate.from_template("""
Вы — умный помощник учителя, обладающий опытом в разработке викторин по различным предметам для учащихся разных классов.
Ваша задача — разработать викторину на тему "{topic}" для {class_level} класса на {language} языке.

Викторина должна включать различные типы вопросов, такие как выбор ответа, открытые вопросы и т.д. Структурируйте материал, используя HTML-теги, и избегайте включения ненужных тегов.

Для викторины используйте следующие данные:
- Длительность урока: 50 минут
- Предмет: {subject}
- Уровень сложности вопросов: {level_test}
- Количество вопросов: {qty}

### Структура викторины:
1. **Вопрос**: Текст вопроса.
   - Вариант ответа 1
   - Вариант ответа 2
   - Вариант ответа 3
   - Вариант ответа 4
   **Правильный ответ:** Укажите правильный вариант ответа.

""")

intellectual_game_prompt = PromptTemplate.from_template("""
Вы — помощник учителя, специализирующийся на создании образовательных игр для учеников. Ваша задача — создать увлекательную интеллектуальную игру для предмета {subject} для {class_level} класса на тему {topic}.

Игра должна:
1. Быть подходящей для учеников уровня {class_level}.
2. Интересной и вовлекающей учащихся в процесс.
3. Помогать проверять знания учащихся по теме.
4. Стимулировать критическое мышление и командную работу.

Предоставьте полное описание игры, включая:
1. **Описание игры**: Как проходит игра? Какие задания должны выполнять учащиеся? 
2. **Цель игры**: Какую цель должны достичь ученики, чтобы выиграть?
3. **Примеры вопросов или заданий**: Укажите несколько конкретных вопросов или заданий, которые ученики должны выполнить.
4. **Развитие сотрудничества**: Как игра стимулирует учеников работать в команде?
5. **Система оценивания**: Как будет оцениваться выполнение заданий (например, баллы, уровни или другой метод оценки)?

Описание игры должно быть полным и включать все детали, чтобы учитель мог легко адаптировать её для использования на уроке.
""")

exercises_prompt = PromptTemplate.from_template("""
Ты — опытный помощник учителя с большим опытом разработки обучающих упражнений для различных классов. Твоя основная цель — создавать структурированные, интерактивные упражнения, которые помогают учащимся усвоить материал на 50-минутном уроке.

**Информация о задании**:
- Предмет: {subject}
- Класс: {class_level}
- Тема упражнения: {topic}

Требования к упражнению:
1. Оно должно быть структурировано и адаптировано под уровень учащихся.
2. Включать ясные и пошаговые инструкции.
3. Быть интерактивным, с возможностью групповой работы, обсуждений или практических заданий.
4. Учащиеся должны выполнять задания, которые стимулируют их к критическому мышлению и активному вовлечению.

**Разделы упражнения**:
1. **Введение** (не менее 100 слов): Объясни цель упражнения и как оно связано с текущей темой урока. Предоставь контекст, чтобы ученики понимали, зачем они выполняют это задание.
2. **Инструкции** (не менее 150 слов): Подробно опиши шаги, которые нужно выполнить ученикам. Добавь примеры выполнения заданий, чтобы облегчить понимание.
3. **Практическая часть** (не менее 500 слов): Описание задач или вопросов, которые ученики должны выполнить, включая примеры и пояснения. Включи минимум 3 задачи или вопроса.
4. **Обсуждение и рефлексия** (не менее 200 слов): Предложи вопросы для обсуждения в классе, чтобы стимулировать критическое мышление и анализ выполненной работы. Включи задания для закрепления материала.

Обеспечь, чтобы упражнение было увлекательным, практическим и стимулирующим для учащихся.
""")

laboratory_prompt = PromptTemplate.from_template("""
Ты — умный помощник учителя с опытом разработки учебных материалов и лабораторных работ для различных предметов. 
Твоя задача — создать детализированную лабораторную работу по предмету "{subject}" на тему "{topic}" для {class_level} класса.

Лабораторная работа должна быть четко структурирована и включать следующие разделы:

1. **Цели лабораторной работы**: Объясни, что студенты должны понять и чему научиться в ходе выполнения лабораторной работы. Укажи конкретные образовательные результаты, которые должны быть достигнуты.
2. **Материалы и оборудование**: Перечисли все необходимые материалы и оборудование для выполнения работы. Укажи, если требуется специальная техника или реактивы.
3. **Критерии оценки**: Опиши, как будет оцениваться выполнение лабораторной работы. Укажи, какие аспекты будут оцениваться: точность выполнения, правильность расчётов, соблюдение техники безопасности и т. д.
4. **Шаги выполнения**: Подробно опиши пошаговый процесс выполнения лабораторной работы. Включи все действия, которые нужно выполнить, и объясни, как правильно проводить измерения, эксперименты и записывать результаты. Также приведи примеры расчётов или ожидаемых результатов, если они необходимы.

Убедись, что лабораторная работа подходит для уровня класса {class_level} и стимулирует критическое мышление.
""")

summary_prompt = PromptTemplate.from_template("""
Ты умный помощник учителя, обладающий обширными знаниями в области педагогики и создания учебных материалов.
Твоя задача — разработать подробный и исчерпывающий конспектный материал по предмету {subject} на тему {topic} для {class_level} класса.

### Важные детали:
- Предмет: {subject}.
- Класс: {class_level}.
- Тема урока: {topic}.
- Длительность урока: 50 минут.

### Требования к конспекту:
1. **Вводное слово** (не менее 200 слов): Объясни важность темы для данного предмета и её применение в реальной жизни. Убедись, что учащиеся понимают, почему эта тема важна для их дальнейшего обучения.

2. **Основные идеи** (не менее 500 слов): Детализируй ключевые понятия, используя несколько примеров для их объяснения. Включи простые и сложные задачи, разъясни, как применить полученные знания. Важно: каждый этап должен быть представлен с подробным объяснением и пошаговыми инструкциями.

3. **Практическое задание** (не менее 200 слов): Приведи как минимум 3 сложные задачи, которые учащиеся должны решить. Включи пошаговое решение каждой задачи, с объяснением, как подойти к решению, и какие методы использовать.

4. **Заключение** (не менее 100 слов): Подведи итоги урока, обобщи ключевые моменты. Предложи дальнейшие направления для углубления знаний. Укажи, какие дополнительные ресурсы можно использовать для изучения темы.

Учти, что конспект должен быть адаптирован для уровня знаний учащихся данного класса, поэтому избегай сложных терминов, если это не требуется, и обеспечь подробные разъяснения на каждом этапе.
""")

# Вы можете продолжить добавлять другие шаблоны аналогичным образом...
input_test_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", test_prompt),
    ("html_parse", html_prompt),
]
input_lesson_plan_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", lesson_plan_prompt),
    ("html_parse", html_prompt),
]
input_quiz_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", quiz_prompt),
    ("html_parse", html_prompt),
]
input_intellectual_game_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", intellectual_game_prompt),
    ("html_parse", html_prompt),
]
input_exercises_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", exercises_prompt),
    ("html_parse", html_prompt),
]
input_laboratory_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", laboratory_prompt),
    ("html_parse", html_prompt),
]
input_summary_prompts = [
    ("language_detect", language_determination_prompt),
    ("content", summary_prompt),
    ("html_parse", html_prompt),
]
# Словарь для хранения шаблонов PromptTemplate по типам задач
task_templates = {
    "TEST": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_test_prompts),
    "LESSON_PLAN": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_lesson_plan_prompts),
    "QUIZ": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_quiz_prompts),
    "INTELLECTUAL_GAME": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_intellectual_game_prompts),
    "EXERCISES": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_exercises_prompts),
    "LABORATORY": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_laboratory_prompts),
    "SUMMARY": PipelinePromptTemplate(final_prompt=full_prompt, pipeline_prompts=input_summary_prompts),
}


# Определяем язык до использования в шаблоне
def determine_language(subject, language):
    if subject in ["Английский язык", "Русский язык"]:
        return subject
    return language


# Функция генерации промпта
def get_prompt(class_level: str, subject_id: int, topic: str, task_type: int, is_kk: bool = True, qty: int = None,
               level_test: str = None):
    subject = get_subject_by_id(subject_id)

    # Подготовка значений по умолчанию
    if is_kk is True:
        interface_lang = 'казахском'
    else:
        interface_lang = 'русском'

    lang = determine_language(subject, interface_lang)
    if level_test is None:
        level_test = 'средний'

    # Преобразование task_type в объект TaskTypes
    try:
        task_type_enum = TaskTypes(task_type)
    except ValueError:
        return "Неизвестный тип задачи. Пожалуйста, выберите корректный тип задачи."

    # Используем TaskTypes для выбора шаблона
    if task_type_enum.name in task_templates:
        template = task_templates[task_type_enum.name]
        return template.format(
            class_level=class_level,
            subject=subject,
            topic=topic,
            qty=qty,
            level_test=level_test,
            language=lang
        )
    else:
        return "Неизвестный тип задачи. Пожалуйста, выберите корректный тип задачи."
